{
  
    
        "post0": {
            "title": "A foray into Autoencoders",
            "content": "from keras.layers import BatchNormalization, Conv2D, Conv2DTranspose from keras.layers import LeakyReLU, Activation, Flatten, Dense, Reshape, Input from keras.models import Model from keras import backend as K import numpy as np import matplotlib from tensorflow.keras.optimizers import Adam from tensorflow.keras.datasets import cifar10 import matplotlib.pyplot as plt . Building the Autencoder . We start by defining the function that builds a convolutional autoencoder. With minor modification, the code is based on the autoencoder for the MNIST example code on Pyimagesearch, which in turn is based on the sample code in the Keras tutorial. Turtles all the way down. :) . The function accepts the shape of the input images, the list of filters for convolution, and the dimension of the latent layer that we wish to encode to. It returns the encoder, the decoder and the autoencoder. . def ConvAuto(inputShape,filters,latentDim): &#39;&#39;&#39;the input shape is channels last along with the image dimensions&#39;&#39;&#39; #inputShape = (height,width,depth) depth=inputShape[2] chanDim =- 1 # define the input shape to the encoder inputs = Input(shape=inputShape) x = inputs # loop over the number of filters for f in filters: # apply CONV =&gt; ReLU =&gt; BN operation x=Conv2D(f,(2,2),strides=2,padding=&quot;same&quot;,activation=&#39;relu&#39;)(x) x=BatchNormalization(axis=chanDim)(x) # flatten the network and then construct our latent vector volumeSize=K.int_shape(x) x=Flatten()(x) latent=Dense(latentDim)(x) # build the encoder model encoder=Model(inputs,latent,name=&#39;encoder&#39;) # now design the decoder model. essentially the inverse of the encoder latentInputs=Input(shape=(latentDim,)) x=Dense(np.prod(volumeSize[1:]))(latentInputs) x=Reshape((volumeSize[1],volumeSize[2],volumeSize[3]))(x) # loop over the filters now in reverse order for f in filters[::-1]: x=Conv2DTranspose(f,(2,2),strides=2,padding=&quot;same&quot;,activation=&#39;relu&#39;)(x) x=BatchNormalization(axis=chanDim)(x) # apply a single convtranspose layer to recover the original image depth x=Conv2DTranspose(depth,(3,3),padding=&quot;same&quot;)(x) outputs=Activation(&quot;sigmoid&quot;)(x) # build the decoder model decoder=Model(latentInputs,outputs,name=&#39;decoder&#39;) # autoencoder is encoder+decoder autoencoder=Model(inputs,decoder(encoder(inputs)),name=&#39;autoencoder&#39;) # return a 3-tupe of encoder, decoder and autoencoder return (encoder,decoder,autoencoder) . Convolution Transpose . Most of us are familiar with the convolutional layer, but the convolutional Transpose is perhaps less familiar. Very quickly, the purpose of this layer is to undo convolutions. So, what the encoder is doing is a series of convolutions on the image, that encode the (nh nw nc) image into a single feature vector, and the decoder is undoing all these convolutions to give us back the image, or as faithful a representation of the image as possible. Here is a very nice discussion about the convolutional transpose, including an explanation of why it is named so. . Getting the Data . We import the CIFAR10 data, and normalize it so the pixel intensities lie between 0 and 1, instead of 0 and 255. This is entirely standard; machine learning algorithms tend to work best when the input data consists of numbers lying somewhere around 0 and 1. . ((trainX, _), (testX, _)) = cifar10.load_data() # scale the pixel intensities to the range [0, 1] trainX = (trainX.astype(&quot;float32&quot;) / 255.0) testX = (testX.astype(&quot;float32&quot;) / 255.0) InputShape=trainX[1].shape . Construct the convolutional autoencoder . (encoder, decoder, autoencoder) = ConvAuto(InputShape,filters=(32,64,128),latentDim=256) opt = Adam(lr=1e-2) autoencoder.compile(loss=&quot;mse&quot;, optimizer=opt) . encoder.summary() . Model: &#34;encoder&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) [(None, 32, 32, 3)] 0 _________________________________________________________________ conv2d (Conv2D) (None, 16, 16, 32) 416 _________________________________________________________________ batch_normalization (BatchNo (None, 16, 16, 32) 128 _________________________________________________________________ conv2d_1 (Conv2D) (None, 8, 8, 64) 8256 _________________________________________________________________ batch_normalization_1 (Batch (None, 8, 8, 64) 256 _________________________________________________________________ conv2d_2 (Conv2D) (None, 4, 4, 128) 32896 _________________________________________________________________ batch_normalization_2 (Batch (None, 4, 4, 128) 512 _________________________________________________________________ flatten (Flatten) (None, 2048) 0 _________________________________________________________________ dense (Dense) (None, 256) 524544 ================================================================= Total params: 567,008 Trainable params: 566,560 Non-trainable params: 448 _________________________________________________________________ . decoder.summary() . Model: &#34;decoder&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_2 (InputLayer) [(None, 256)] 0 _________________________________________________________________ dense_1 (Dense) (None, 2048) 526336 _________________________________________________________________ reshape (Reshape) (None, 4, 4, 128) 0 _________________________________________________________________ conv2d_transpose (Conv2DTran (None, 8, 8, 128) 65664 _________________________________________________________________ batch_normalization_3 (Batch (None, 8, 8, 128) 512 _________________________________________________________________ conv2d_transpose_1 (Conv2DTr (None, 16, 16, 64) 32832 _________________________________________________________________ batch_normalization_4 (Batch (None, 16, 16, 64) 256 _________________________________________________________________ conv2d_transpose_2 (Conv2DTr (None, 32, 32, 32) 8224 _________________________________________________________________ batch_normalization_5 (Batch (None, 32, 32, 32) 128 _________________________________________________________________ conv2d_transpose_3 (Conv2DTr (None, 32, 32, 3) 867 _________________________________________________________________ activation (Activation) (None, 32, 32, 3) 0 ================================================================= Total params: 634,819 Trainable params: 634,371 Non-trainable params: 448 _________________________________________________________________ . EPOCHS = 40 # batch size BS = 64 # train the convolutional autoencoder H = autoencoder.fit(trainX, trainX, validation_data=(testX, testX),epochs=EPOCHS,batch_size=BS) . Epoch 1/40 782/782 [==============================] - 43s 55ms/step - loss: 0.0132 - val_loss: 0.0078 Epoch 2/40 782/782 [==============================] - 45s 58ms/step - loss: 0.0055 - val_loss: 0.0086 Epoch 3/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0042 - val_loss: 0.0063 Epoch 4/40 782/782 [==============================] - 46s 58ms/step - loss: 0.0035 - val_loss: 0.0049 Epoch 5/40 782/782 [==============================] - 45s 58ms/step - loss: 0.0033 - val_loss: 0.0062 Epoch 6/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0032 - val_loss: 0.0041 Epoch 7/40 782/782 [==============================] - 45s 58ms/step - loss: 0.0032 - val_loss: 0.0033 Epoch 8/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0031 - val_loss: 0.0043 Epoch 9/40 782/782 [==============================] - 46s 58ms/step - loss: 0.0030 - val_loss: 0.0042 Epoch 10/40 782/782 [==============================] - 46s 58ms/step - loss: 0.0031 - val_loss: 0.0034 Epoch 11/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0034 Epoch 12/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0043 Epoch 13/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0034 Epoch 14/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0035 Epoch 15/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0030 Epoch 16/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0029 - val_loss: 0.0053 Epoch 17/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0027 Epoch 18/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0028 - val_loss: 0.0194 Epoch 19/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0030 Epoch 20/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0030 - val_loss: 0.0034 Epoch 21/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0029 - val_loss: 0.0029 Epoch 22/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0029 - val_loss: 0.0033 Epoch 23/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0033 - val_loss: 0.0029 Epoch 24/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0035 Epoch 25/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0027 - val_loss: 0.0029 Epoch 26/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0027 - val_loss: 0.0032 Epoch 27/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0061 Epoch 28/40 782/782 [==============================] - 46s 59ms/step - loss: 0.0028 - val_loss: 0.0033 Epoch 29/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0029 - val_loss: 0.0031 Epoch 30/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0029 - val_loss: 0.0027 Epoch 31/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0031 Epoch 32/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0044 Epoch 33/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0026 Epoch 34/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0030 Epoch 35/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0027 - val_loss: 0.0028 Epoch 36/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0027 - val_loss: 0.0030 Epoch 37/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0027 - val_loss: 0.0027 Epoch 38/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0027 - val_loss: 0.0027 Epoch 39/40 782/782 [==============================] - 47s 60ms/step - loss: 0.0028 - val_loss: 0.0040 Epoch 40/40 782/782 [==============================] - 47s 61ms/step - loss: 0.0027 - val_loss: 0.0025 . autoencoder.save(&#39;autoencoder_cifar_10.h5&#39;) . from keras.models import load_model autoencoder=load_model(&#39;autoencoder_cifar_10.h5&#39;) . Training History . N = np.arange(0, EPOCHS) plt.figure() plt.plot(N, H.history[&quot;loss&quot;], label=&quot;train_loss&quot;) plt.plot(N, H.history[&quot;val_loss&quot;], label=&quot;val_loss&quot;) plt.title(&quot;Training Loss and Accuracy&quot;) plt.xlabel(&quot;Epoch #&quot;) plt.ylabel(&quot;Loss/Accuracy&quot;) plt.legend(loc=&quot;lower left&quot;) plt.show() . Visualizing a randomly chosen image and its Autoencoder Output . limit=10 original=testX[:limit] decoded=autoencoder.predict(original) . fig, (ax1, ax2) = plt.subplots(1,2) fig.suptitle(&#39;CIFAR-10 Images&#39;) ax1.imshow(original[1],cmap=plt.cm.binary) ax2.imshow(original[2],cmap=plt.cm.binary) plt.show() fig, (ax1, ax2) = plt.subplots(1,2) fig.suptitle(&#39;Autoencoder Output Images&#39;) ax1.imshow(decoded[1],cmap=plt.cm.binary) ax2.imshow(decoded[2],cmap=plt.cm.binary) plt.show() . Possible Improvements . We used a convolutional autoencoder to compress the 32$ times$ 32 $ times$ 3 images of CIFAR-10 into a 256 dimensional latent vector. The reconstruction is reasonable, since we&#39;ve cut down the size of the representation to 1/12 of the original, but the performance is somewhat variable across images. Different images tend to reconstruct better than others. There are a few somewhat suggestive ways of trying to improve the performance: . Increase the size of the latent vector, which would work, but also seems to somewhat defeat the purpose of compression. | More interestingly, try to improve the design of the encoder convnet so it is able to capture the essential features of the images more efficiently. | Also as we previously mentioned, it would be interesting to play with different choices of the loss function, to see if performance improves. | . The last option seems an interesting one. Since the autoencoder performs better on some images and not as well on others, it is plausible that it is secretly overfitting on some subset, which we&#39;ve not isolated yet. . What do you think? Let me know! .",
            "url": "https://shaileshlal.github.io/mlblog/2020/11/24/AutoEncoders_CIFAR_10.html",
            "relUrl": "/2020/11/24/AutoEncoders_CIFAR_10.html",
            "date": " • Nov 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shaileshlal.github.io/mlblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shaileshlal.github.io/mlblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "&quot;Forty-two!&quot; yelled Loonquawl. &quot;Is that all you&#39;ve got to show for seven and a half million years&#39; work? &quot; . &quot;I checked it very thoroughly,&quot; said the computer, &quot;and that quite definitely is the answer. I think the problem, to be quite honest with you, is that you&#39;ve never actually known what the question is.&quot; . I’m a physicist, a string theorist by training, and I work in various aspects of data science, and string theory. . I started work in machine learning as a means to address open problems in theoretical physics, and am now interested in broader applications in the industry as well. . I usually work in Keras, and TensorFlow with dalliances in FastAI. . As for my work in string theory, I work on the AdS/CFT correspondence. Since its proposal in the 1990s this correspondence has provided profound insights into black holes, the nature of spacetime, how fluids flow, and the like. . I work on explaining how this correspondence comes into being. .",
          "url": "https://shaileshlal.github.io/mlblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shaileshlal.github.io/mlblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}